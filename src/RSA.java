
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.Scanner;
    

public class RSA {
	private  BigInteger priv_key;
	private static  BigInteger pub_key;
	private static  BigInteger N;
	private final static int key = 1024; // Length

   public RSA() {
	  SecureRandom random = new SecureRandom();
      BigInteger p = BigInteger.probablePrime(key/2, random);
      /* P = "5";
		BigInteger p = new BigInteger(P);*/
      BigInteger q = BigInteger.probablePrime(key/2, random);
      /* String Q = "7";
		BigInteger q = new BigInteger(Q);
	//System.out.println("P: " + p);*/
      BigInteger phi = (p.subtract(BigInteger.ONE)).multiply(q.subtract(BigInteger.ONE));
      N = p.multiply(q);                                  
      pub_key  = new BigInteger("65537");
      priv_key = pub_key.modInverse(phi);
	//System.out.println("private_Key: " + private_Key);
   }
   public String encrypt(String message, String N, String pub_key){
	   BigInteger original = new BigInteger(message.getBytes());
	   BigInteger encrypted = original.modPow(new BigInteger(pub_key), new BigInteger(N));
	   return new String(encrypted.toString());
   }
	public static String Encrypt(String message) {
		BigInteger original = new BigInteger(message.getBytes());
		BigInteger publicKey = pub_key;
		BigInteger modulus = N;
		BigInteger encrypted = original.modPow(pub_key, modulus);
		return new String(encrypted.toString());
	}
   public String decrypt(String message){
	   BigInteger encrypted = new BigInteger(message);
	   BigInteger original = encrypted.modPow(priv_key, N);
	   return new String(original.toByteArray()); 
	 //System.out.println("original: "+original);
   }

   public String getPublicKey(){
	   return pub_key.toString();
   }
   
   public String getModulus(){
	   return N.toString();
   }
	public static void main(String[ ]args) { 
		RSA rsa = new RSA(); 
		Scanner in = new Scanner(System.in);
		String s = in.nextLine();
		String encrStr = Encrypt(s); 
		System.out.println("encrypt: "+encrStr);
		//String encrStr = "292590171264191282055658507462129188004180295460513619946456957566583144116883911303122240864104114583582277558740514260078998137023568416863520154754873908268698236086925452893953187376483371020175382295109366384860921175955580138324492190395173936372813195983260290896727972910783928499237017066672625245690399999451098380633149013973588803817715926098612611950387831743543596796266375904025966905389150993780490479440622587563448165650168809283664761089944911415639832354141064885458308716252678586484598701095031771702291281870116588533184586095250750737390521119010700169035278454008124424358785561446306145360481633905904758639761179779065714985013321835068564307859520412891005660006170544609319228875012233876832267684742565002850273694020325335609540548680424328636473792128399693203833901925794699682567860411293521007885452810759849483849293144732092224296270142839907699094470640263532843514692597206158162050813475969045828120605576346001359461392162104149057981860847248382859891810797447628586287594537885846679152744055531271785767491316011743718111583769726004646246542369616469939852294023017070892500067640269022218000830987905102133537093605423030348563334292834488245884933694529703050258799879355269887443005547891298395851480240770345962969634792394124423754035783385704436161966018678835425959804507808146470272258391604621166851246749468538470692586207468742606266270433817036994991295913605995985080633434054766693039042608842073857891255549859964489721578531006376685203407357711692574157806215756624281141388469750049958196224716885275430184064211558648651005389013275054806535705487954516292984013497874997527312113509592017137858698920676997579786432172261632577378613045081342943277202791794820801816847104484582108028305606056782560942346396863589391039830814571975015854670287138284108374264133476023214994298510295584852324638771131122738783875051931363348833487464192437062524511168809841742552778411883674196758727024972012688405356322960821741461725906219758650905589801023399140216918114366269542011331368173188834950328518933251306901976093318718571499053189677446778449583587078375823759874365123971313980931886933232291243266186882337279844567057937096148534578025297390035941274663509405120671391461383788426083265149162154920793809612296809873306585602284641222110995097995582926796725881610227885374871896364879708384185611615218362766207975802892064504266646029667153082261193053563349799456299839463802828867630617396062" ;
	  
	 String dec = rsa.decrypt(encrStr); 
	 System.out.println("Decrypted: "+dec);
	// System.out.println(dec); 
	 } 
}
